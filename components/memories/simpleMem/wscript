# -*- coding: iso-8859-1 -*-
##############################################################################
#
#
#         ___           ___           ___           ___
#        /  /\         /  /\         /  /\         /  /\
#       /  /::\       /  /:/_       /  /:/_       /  /::\
#      /  /:/\:\     /  /:/ /\     /  /:/ /\     /  /:/\:\
#     /  /:/~/:/    /  /:/ /:/_   /  /:/ /::\   /  /:/~/:/
#    /__/:/ /:/___ /__/:/ /:/ /\ /__/:/ /:/\:\ /__/:/ /:/
#    \  \:\/:::::/ \  \:\/:/ /:/ \  \:\/:/~/:/ \  \:\/:/
#     \  \::/~~~~   \  \::/ /:/   \  \::/ /:/   \  \::/
#      \  \:\        \  \:\/:/     \__\/ /:/     \  \:\
#       \  \:\        \  \::/        /__/:/       \  \:\
#        \__\/         \__\/         \__\/         \__\/
#
#
#
#
#   This file is part of ReSP.
#
#   TRAP is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this program; if not, write to the
#   Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#   or see <http://www.gnu.org/licenses/>.
#
#
#
#   (c) Giovanni Beltrame, Luca Fossati
#       Giovanni.Beltrame@esa.int fossati@elet.polimi.it
#
##############################################################################

# Build
def build(bld):
    obj = bld.new_task_gen('pypp')
    obj.source = """
        MemoryLT.hpp
    """
    obj.target = 'MemoryLT32'
    obj.uselib = 'BOOST PYEXT BOOST_PYTHON TLM SYSTEMC_H'
    obj.uselib_local = 'systemc utils'
    obj.include = 'scwrapper tlmwrapper'
    obj.start_decls = 'MemoryLT'
    obj.templates = ['MemoryLT<32>']
    obj.custom_code = """
cls = mb.global_ns.classes(lambda decl : decl.name.startswith('MemoryLT') )
for i in cls:
    i.include()
    i.alias = 'MemoryLT32'
    try:
        mb.global_ns.member_function('get_direct_mem_ptr').exclude()
    except:
        pass
"""

    obj = bld.new_task_gen('pypp')
    obj.source = """
        MemoryAT.hpp
    """
    obj.target = 'MemoryAT32'
    obj.uselib = 'BOOST PYEXT BOOST_PYTHON TLM SYSTEMC_H'
    obj.uselib_local = 'systemc utils'
    obj.include = 'scwrapper tlmwrapper'
    obj.start_decls = 'MemoryAT'
    obj.templates = ['MemoryAT<32>']
    obj.custom_code = """
cls = mb.global_ns.classes(lambda decl : decl.name.startswith('MemoryAT') )
for i in cls:
    i.include()
    i.alias = 'MemoryAT32'
    try:
        i.member_function('send_response').exclude()
        i.member_function('send_end_req').exclude()
        i.member_function('peq_cb').exclude()
    except:
        pass
"""
