#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-
# encoding: utf-8

import Options
import sys,os

sys.path.append('./tools/waf')
from waf_utils import rec_find

def build(bld):

    # Build and compile the TLM wrapper extension module
    obj = bld.new_task_gen('pypp')

    obj.source ='''
    tlm_export.hpp
    '''

    obj.target = 'tlmwrapper';
    obj.start_decls = 'tlm tlm_utils'

    obj.custom_code = """
# Include simple sockets
print 'Including base sockets sockets'
cls = mb.global_ns.classes(lambda decl: decl.name.startswith('tlm_base_target_socket') or decl.name.startswith('tlm_target_socket') , allow_empty=True)
for i in cls:
    i.include()
    i.member_functions(allow_empty=True).exclude()

print 'Including tlm_base_initiator_socket'
cls = mb.global_ns.classes(lambda decl: decl.name.startswith('tlm_base_initiator_socket') or decl.name.startswith('tlm_initiator_socket'), allow_empty=True)
for i in cls:
    i.include()
    i.member_functions(allow_empty=True).exclude()
    for k in i.member_functions(allow_empty=True):
        if k.name == 'bind':  k.include()

print 'Including simple_'
cls = mb.global_ns.classes(lambda decl: decl.name.startswith('simple_'), allow_empty=True)
for i in cls:
    i.include()

print 'Including tlm_base_protocol_types'
cls = mb.global_ns.classes(lambda decl: decl.name.startswith('tlm_base_protocol_types'), allow_empty=True)
for i in cls:
    i.include()

print 'Including tlm_quantumkeeper'
cls = mb.global_ns.classes(lambda decl: decl.name.startswith('tlm_quantumkeeper'), allow_empty=True)
for i in cls:
    i.include()

#print 'Including tlm_fw_transport_if'
#cls = mb.global_ns.classes(lambda decl: decl.name.startswith('tlm_fw_transport_if'), allow_empty=True)
#for i in cls:
    #i.include()

# Exclude protected members
cls = mb.global_ns.calldefs( declarations.access_type_matcher_t( 'protected' ) , allow_empty=True )
if cls: cls.exclude()

sc_names = mb.namespaces(lambda x: x.name in ['tlm', 'tlm_utils'])
for cur_namespace in sc_names:
    for i in cur_namespace.free_functions(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
    for i in cur_namespace.casting_operators(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
    for i in cur_namespace.classes(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
    for i in cur_namespace.enumerations(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
    for i in cur_namespace.variables(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
    for i in cur_namespace.free_operators(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
    for i in cur_namespace.typedefs(allow_empty=True):
        if not i.alias.startswith('TLM_'):
            i.alias = 'TLM_'+i.alias
"""
    obj.uselib = 'SYSTEMC_H TLM BOOST_PYTHON BOOST PYEXT'
    obj.uselib_local = 'systemc'
    obj.includes = '.'
    obj.include = 'scwrapper'

