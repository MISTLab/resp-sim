# -*- coding: iso-8859-1 -*-
##############################################################################
#
#
#         ___           ___           ___           ___
#        /  /\         /  /\         /  /\         /  /\
#       /  /::\       /  /:/_       /  /:/_       /  /::\
#      /  /:/\:\     /  /:/ /\     /  /:/ /\     /  /:/\:\
#     /  /:/~/:/    /  /:/ /:/_   /  /:/ /::\   /  /:/~/:/
#    /__/:/ /:/___ /__/:/ /:/ /\ /__/:/ /:/\:\ /__/:/ /:/
#    \  \:\/:::::/ \  \:\/:/ /:/ \  \:\/:/~/:/ \  \:\/:/
#     \  \::/~~~~   \  \::/ /:/   \  \::/ /:/   \  \::/
#      \  \:\        \  \:\/:/     \__\/ /:/     \  \:\
#       \  \:\        \  \::/        /__/:/       \  \:\
#        \__\/         \__\/         \__\/         \__\/
#
#
#
#
#   This file is part of ReSP.
#
#   TRAP is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this program; if not, write to the
#   Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#   or see <http://www.gnu.org/licenses/>.
#
#
#
#   (c) Giovanni Beltrame, Luca Fossati
#       Giovanni.Beltrame@esa.int fossati@elet.polimi.it
#
##############################################################################

import Options
import sys,os

def build(bld):

    # Build and compile the TLM wrapper extension module
    obj = bld.new_task_gen('pypp')

    obj.source ='''
    trap_wrapper.hpp
    '''

    obj.target = 'trapwrapper'
    obj.start_decls = 'trap'

    obj.custom_code = """
OSEmulatorBase = mb.global_ns.class_('OSEmulatorBase')
OSEmulatorBase.include()
tcls = mb.global_ns.classes(lambda decl: decl.name.startswith('ToolsIf'), allow_empty=True)
for i in tcls:
    i.include()
ocls = mb.global_ns.classes(lambda decl: decl.name.startswith('OSEmulator'), allow_empty=True)
for i in ocls:
    i.include()
    if i.name == 'OSEmulator<unsigned int, 0>':
        i.alias = 'OSEmulator32_0'
mb.global_ns.class_('ABIIf<unsigned int>').include()

mb.global_ns.classes(lambda decl: decl.name.startswith('ToolsManager'), allow_empty=True).include()
mb.global_ns.classes(lambda decl: decl.name.startswith('MemoryToolsIf'), allow_empty=True).ignore = False

trap_names = mb.namespaces(lambda x: x.name == 'trap')
for cur_namespace in trap_names:
    for i in cur_namespace.free_functions(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
    for i in cur_namespace.casting_operators(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
    for i in cur_namespace.classes(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
    for i in cur_namespace.enumerations(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
    for i in cur_namespace.variables(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
    for i in cur_namespace.free_operators(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
    for i in cur_namespace.typedefs(allow_empty=True):
        i.alias = 'TRAPW_'+i.alias
"""
    obj.uselib = 'SYSTEMC_H TLM TRAP BOOST_PYTHON BOOST_THREAD BOOST_SYSTEM BOOST PYEXT'
    obj.uselib_local = 'systemc binutils'
    obj.include = 'scwrapper tlmwrapper'
    obj.templates = [
        'trap::OSEmulator< unsigned int, 0 >'
        ,'trap::ABIIf< unsigned int >'
    ]
