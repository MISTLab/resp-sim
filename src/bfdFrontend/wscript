#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

import os, sys

def build(bld):
    obj = bld.new_task_gen('cxx', 'cshlib')
    obj.env['shlib_PREFIX'] = "lib"
    if sys.platform == 'darwin':
        obj.env['shlib_SUFFIX'] = obj.env['shlib_ORIG_SUFFIX']
    obj.source = """
        bfdFrontend.cpp
    """
    obj.target = 'BFDFrontend'
    obj.uselib = 'BOOST BOOST_REGEX OPCODES BFD LIBERTY'

    obj = bld.new_task_gen('pypp')
    obj.source = """
        bfdFrontend.hpp
    """
    obj.target = 'bfdwrapper'
    obj.uselib = 'BOOST BOOST_REGEX PYEXT BOOST_PYTHON OPCODES BFD LIBERTY'
    obj.uselib_local = 'BFDFrontend'
    obj.start_decls = 'BFDFrontend'
    obj.custom_declaration_code = '''
#include <string>
#include <list>
#include "python_converters.hpp"

namespace sandbox { namespace {

    void list_string_converter(){
        resp::tuple_mapping<std::list<std::string>, resp::variable_capacity_policy>();
    }

    void init_module(){
        list_string_converter();
    }

}} // namespace sandbox::<anonymous>
'''
    obj.custom_registration_code = '''sandbox::init_module();'''
    obj.custom_code = """
mb.global_ns.class_('Section').exclude()
bfd = mb.global_ns.class_('BFDFrontend')
bfd.include()
bfd.member_functions('findFunction').exclude()
"""
